/*
///...Graph Representation...///(Adjacency list)
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define endl '\n'
vector<int>v[10000];
int main(){
 
   ll node,edges;cin>>node>>edges;
   while(edges--){
      ll node1,node2;
      cin>>node1>>node2;
      v[node1].push_back(node2);
      v[node2].push_back(node1);
 
   }
 
   for(ll i=1;i<=node;i++){
        cout<<i;
        for(ll j=0;j<v[i].size();j++){
 
              cout<<"-> "<<v[i][j];
        }
        cout<<endl;
   }
 
 
 
}
 
*/
 
/*
 
///....DFS...///(Using Recursion)
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define endl '\n'
vector<int>v[10000];
int vis[1003];
void DFS(int node){
 
    vis[node]=1;
    cout<<node<<"-> ";
 
    for(ll i=0;i<v[node].size();i++){
         ll child=v[node][i];
         if(vis[child]==0){
             DFS(child);
         }
    }
 
}
int main(){
 
   ll node,edges;cin>>node>>edges;
   while(edges--){
      ll node1,node2;
      cin>>node1>>node2;
      v[node1].push_back(node2);
      v[node2].push_back(node1);
 
   }
 
   DFS(1);
 
}
 
*/
 
 
/*
///Adjacency Matrix Representation///
 
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define endl '\n'
int v[100][100];
int main(){
 
   ll node,edges;cin>>node>>edges;
   while(edges--){
       ll node1,node2;cin>>node1>>node2;
       v[node1][node2]=1;
       v[node2][node1]=1;
   }
 
   for(ll i=0;i<node;i++){
      for(ll j=0;j<node;j++){
           cout<<v[i][j]<<" ";
      }
      cout<<endl;
   }
 
}
*/
 
/*
Input:
5 6
0 1
2 0
2 1
1 3
3 4
1 4
Output:
0 1 1 0 0
1 0 1 1 1
1 1 0 0 0
0 1 0 0 1
0 1 0 1 0
 
*/
 
/*
///If,say that,find the neighbor of x or count ?///
 
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define endl '\n'
int v[100][100];
int main(){
 
   ll node,edges;cin>>node>>edges;
   while(edges--){
       ll node1,node2;cin>>node1>>node2;
       v[node1][node2]=1;
       v[node2][node1]=1;
   }
   ll x;cin>>x;
   ll cnt=0;
   for(ll i=0;i<node;i++){
        if(v[x][i]==1){
             //cout<<i<<" ";
             cnt++;
        }
 
   }
  // cout<<endl;
  cout<<cnt<<endl;
 
}
 
*/
 
 
 
 
///...Find finishing time...///
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define endl '\n'
#define WHITE 1
#define GRAY 2
#define BLACK 3
vector<vector<int>> v;
vector<int> color;
vector<int> sTime;
vector<int> fTime;
 
int node, edge;
int Time = 1;
 
void dfsVisit(int x) {
    color[x] = GRAY;
    sTime[x] = Time++;
 
    for (ll i = 0; i < node; i++) {
        if (v[x][i] == 1 && color[i] == WHITE) {
            dfsVisit(i);
        }
    }
 
    color[x] = BLACK;
    fTime[x] = Time++;
}
 
void dfs() {
    for (ll i = 0; i < node; i++) {
        color[i] = WHITE;
    }
    for (ll i = 0; i < node; i++) {
        if (color[i] == WHITE) {
            dfsVisit(i);
        }
    }
}
 
int main() {
    cin >> node >> edge;
    v.assign(node, vector<int>(node, 0));
    color.assign(node, WHITE);
    sTime.assign(node, 0);
    fTime.assign(node, 0);
 
    while (edge--) {
        int node1, node2;
        cin >> node1 >> node2;
 
 
        if (node1 >= node || node2 >= node || node1 < 0 || node2 < 0) {
            cout << "Invalid edge: (" << node1 << ", " << node2 << ")" << endl;
            return 1;
        }
 
        v[node1][node2] = 1;
        //v[node2][node1] = 1;
    }
 
    dfs();
 
    cout << endl;
    for (int i = 0; i < node; i++) {
        cout << "Node: " << (char)('A' + i) << " Start Time: " << sTime[i]
             << " Finish Time: " << fTime[i] << endl;
    }
 
    return 0;
}
 
 
/*
///....DFS....///
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define endl '\n'
#define WHITE 1
#define GRAY 2
#define BLACK 3
 
vector<vector<int>> v;
vector<int> color;
vector<int> track;
 
int node, edge;
 
void dfsVisit(int x) {
    color[x] = GRAY;
    track.push_back(x);
    for (ll i = 0; i < node; i++) {
        if (v[x][i] == 1 && color[i] == WHITE) {
            dfsVisit(i);
        }
    }
 
    color[x] = BLACK;
}
 
void dfs() {
    for (ll i = 0; i < node; i++) {
        color[i] = WHITE;
    }
    for (ll i = 0; i < node; i++) {
        if (color[i] == WHITE) {
            dfsVisit(i);
        }
    }
}
 
int main() {
    cin >> node >> edge;
    v.assign(node, vector<int>(node, 0));
    color.assign(node, WHITE);
 
    while (edge--) {
        ll n1, n2;
        cin >> n1 >> n2;
 
        if (n1 >= node || n2 >= node || n1 < 0 || n2 < 0) {
            cout << "Invalid edge" << endl;
            return 1;
        }
 
        v[n1][n2] = 1;
        v[n2][n1] = 1;
    }
 
    dfs();
 
    for (auto u : track) {
        cout << u << " ";
    }
    cout << endl;
 
    return 0;
}
 
*/
 
 
